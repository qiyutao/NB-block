// Do not edit this file; automatically generated by build.py.
'use strict';


Blockly.Arduino.nb_register = function() {
    Blockly.Arduino.setups_['setup_nb_register_'] =  "Serial2.begin(9600);\n"+
    "Serial1.begin(9600);\n"+
    "String Byte1;\n"+
    "Serial2.print(\"AT\\r\\n\");\n"+
    "delay(100);\n"+
    "if (Serial2.available()>0) {\n"+
    "Byte1 = Serial2.readString();\n"+
    "delay(50);\n"+
    "Serial1.print(Byte1);//ok\n"+
    "delay(50);\n"+
    "if(Byte1.indexOf(\"OK\") == -1) {Serial1.println(\"NB_INIT_ERROR : NB Init Failed !\");return ;}Byte1 = \"\";\n"+
    "Serial2.print(\"AT+CIMI\\r\\n\");\n"+
    "delay(100);\n"+
    "if (Serial2.available()>0) {\n"+
    "Byte1 = Serial2.readString();\n"+
    "delay(50);\n"+
    "Serial1.print(Byte1);\n"+
    "delay(50);\n"+
    "if(Byte1.indexOf(\"OK\") == -1) {Serial1.println(\"NB_INIT_ERROR : Query IMSI Failed !\");return ;}String imsi;for(int i=2;i<17;i++) {imsi += \"3\";imsi += Byte1.charAt(i);}Byte1 = \"\";\n"+
    "Serial2.print(\"AT+CGSN=1\\r\\n\");\n"+
    "delay(100);\n"+
    "if (Serial2.available()>0) {\n"+
    "Byte1 = Serial2.readString();\n"+
    "delay(50);\n"+
    "Serial1.print(Byte1);\n"+
    "delay(50);\n"+
    "if(Byte1.indexOf(\"OK\") == -1) {Serial1.println(\"NB_INIT_ERROR : Query IMEI Failed !\");return ;}String imei;for(int i=8;i<23;i++) {imei += \"3\";imei += Byte1.charAt(i);}Byte1 = \"\";\n"+
    "Serial2.print(\"AT+CGATT?\\r\\n\");\n"+
   "delay(100);\n"+
    "if (Serial2.available()>0) {\n"+
    "Byte1 = Serial2.readString();\n"+
    "delay(50);\n"+
    "Serial1.print(Byte1); //+CGATT:1\n"+
    "delay(50);\n"+
    "if(Byte1.indexOf(\"+CGATT:1\") == -1) {Serial1.println(\"NB_INIT_ERROR : Attached Network Failed !\");return ;}Byte1 = \"\";\n"+
    "String miplconf = \"AT+MIPLCONF=71,10033A16B80B00001900636F61703A2F2F3138332E3233302E34302E33393A353638331F00\";miplconf += imei;miplconf += \"3B\";miplconf += imsi;miplconf += \"050501,1,1\\r\\n\";Serial2.print(miplconf);\n"+
    "delay(100);\n"+
    "if (Serial2.available()>0) {\n"+
    "Byte1 = Serial2.readString();\n"+
    "delay(50);\n"+
    "Serial1.print(Byte1);\n"+
    "delay(50);\n"+
    "if(Byte1.indexOf(\"OK\") == -1) {Serial1.println(\"NB_INIT_ERROR : Config Failed !\");return ;}Byte1 = \"\";\n"+
    "Serial2.print(\"AT+MIPLADDOBJ=0,3311,0\\r\\n\");\n"+
    "delay(100);\n"+
    "if (Serial2.available()>0) {\n"+
    "Byte1 = Serial2.readString();\n"+
    "delay(50);\n"+
    "Serial1.print(Byte1);\n"+
    "delay(50);\n"+
    "if(Byte1.indexOf(\"OK\") == -1) {Serial1.println(\"NB_INIT_ERROR : Add Object Failed !\");return ;}Byte1 = \"\";\n"+
    "Serial2.print(\"AT+MIPLNOTIFY=0,3311,0,5850,3,\\\"0\\\",0\\r\\n\");\n"+
    "delay(100);\n"+
    "if (Serial2.available()>0) {\n"+
    "Byte1 = Serial2.readString();\n"+
    "delay(50);\n"+
    "Serial1.print(Byte1);\n"+
    "delay(50);\n"+
    "if(Byte1.indexOf(\"OK\") == -1) {Serial1.println(\"NB_INIT_ERROR : Add Attributes Failed !\");return ;}Byte1 = \"\";\n"+
    "Serial2.print(\"AT+MIPLNOTIFY=0,3311,0,5851,3,\\\"0\\\",0\\r\\n\");\n"+
    "delay(100);\n"+
    "if (Serial2.available()>0) {\n"+
    "Byte1 = Serial2.readString();\n"+
    "delay(50);\n"+
    "Serial1.print(Byte1);\n"+
    "delay(50);\n"+
    "if(Byte1.indexOf(\"OK\") == -1) {Serial1.println(\"NB_INIT_ERROR : Add Attributes Failed !\");return ;}Byte1 = \"\";\n"+
    "Serial2.print(\"AT+MIPLNOTIFY=0,3311,0,5852,3,\\\"0\\\",0\\r\\n\");\n"+
    "delay(100);\n"+
    "if (Serial2.available()>0) {\n"+
    "Byte1 = Serial2.readString();\n"+
    "delay(50);\n"+
    "Serial1.print(Byte1);\n"+
    "delay(50);\n"+
    "if(Byte1.indexOf(\"OK\") == -1) {Serial1.println(\"NB_INIT_ERROR : Add Attributes Failed !\");return ;}Byte1 = \"\";\n"+
    "Serial2.print(\"AT+MIPLOPEN=0,70\\r\\n\");\n"+
    "delay(100);\n"+
    "if (Serial2.available()>0) {\n"+
    "Byte1 = Serial2.readString();\n"+
    "delay(50);\n"+
    "Serial1.print(Byte1);\n"+
    "delay(50);\n"+
    "if(Byte1.indexOf(\"+MIPLOPEN:0,1\") == -1) {Serial1.println(\"NB_INIT_ERROR : Connetc Failed !\");return ;}}}}}}}}}}}";
    var code = '';
    return code;
  };

  Blockly.Arduino.nb_fresh = function() {
    var code = 'Serial2.print("AT+MIPLUPDATE=0,300,0\\r\\n");\n'+
    'delay(100);\n'+
    'if (Serial2.available()>0) {\n'+
    'String Byte1 = Serial2.readString();\n'+
    'delay(50);\n'+
    'Serial1.print(Byte1);\n'+
    'delay(50);\n'+
    '}\n';
    return code;
  };

  Blockly.Arduino.nb_upload = function() {
    var obj = Blockly.Arduino.valueToCode(this, 'NB_UPLOAD_OBJ', Blockly.Arduino.ORDER_ATOMIC);
    var attr = Blockly.Arduino.valueToCode(this, 'NB_UPLOAD_ATTR', Blockly.Arduino.ORDER_ATOMIC);
    var value = Blockly.Arduino.valueToCode(this, 'NB_UPLOAD_VALUE', Blockly.Arduino.ORDER_ATOMIC);
    var code = 'Serial2.print("AT+MIPLNOTIFY=0,'+obj+',0,'+attr+',3,\\"'+value+'\\",1\\r\\n");\n'+
    'delay(100);\n'+
    'if (Serial2.available()>0) {\n'+
    'String Byte1 = Serial2.readString();\n'+
    'delay(50);\n'+
    'Serial1.print(Byte1);\n'+
    'delay(50);\n'+
    '}\n';
    return code;
  };

  Blockly.Arduino.nb_add_obj= function() {
    var obj = Blockly.Arduino.valueToCode(this, 'NB_ADD_OBJ', Blockly.Arduino.ORDER_ATOMIC);
    Blockly.Arduino.setups_['setup_nb_add_obj_'] = 'Serial2.print("AT+MIPLADDOBJ=0,'+obj+',0\\r\\n");\n'+
    'delay(100);\n'+
    'if (Serial2.available()>0) {\n'+
    'String Byte1 = Serial2.readString();\n'+
    'delay(50);\n'+
    'Serial1.print(Byte1);\n'+
    'delay(50);\n'+
    '}\n';
    var code = '';
    return code;
  };

  Blockly.Arduino.nb_add_attr = function() {
    var obj = Blockly.Arduino.valueToCode(this, 'NB_ADD_ATTR_OBJ', Blockly.Arduino.ORDER_ATOMIC);
    var attr = Blockly.Arduino.valueToCode(this, 'NB_ADD_ATTR_ATTR', Blockly.Arduino.ORDER_ATOMIC);
    Blockly.Arduino.setups_['setup_nb_add_attr_'] = 'Serial2.print("AT+MIPLNOTIFY=0,'+obj+',0,'+attr+',3,\\"0\\",0\\r\\n");\n'+
    'delay(100);\n'+
    'if (Serial2.available()>0) {\n'+
    'String Byte1 = Serial2.readString();\n'+
    'delay(50);\n'+
    'Serial1.print(Byte1);\n'+
    'delay(50);\n'+
    '}\n';
    var code = '';
    return code;
  };

  Blockly.Arduino.nb_onenet_write = function() {
    var data = Blockly.Arduino.valueToCode(this, 'nb_onenet_write_Data', Blockly.Arduino.ORDER_ATOMIC);
    var code = 'if (Serial2.available()>0) {\n'+
      'String Byte_WRITE_data = "-1";\n'+
  'String Byte_WRITE = Serial2.readString();\n'+
  'delay(50);\n'+
  'Serial1.print(Byte_WRITE);\n'+
  'delay(50);\n'+
  'int Byte_WRITE_index = Byte_WRITE.indexOf("+MIPLWRITE");\n'+
  'if( Byte_WRITE_index != -1) {\n'+
      'String Byte_WRITE_NUM = Byte_WRITE.substring(Byte_WRITE_index+13,Byte_WRITE_index+18);\n'+
     'Serial1.print("AT+MIPLWRITE=0,"+Byte_WRITE_NUM+",1\\r\\n");\n'+
      'Serial2.print("AT+MIPLWRITE=0,"+Byte_WRITE_NUM+",1\\r\\n");\n'+
      'Byte_WRITE_data = Byte_WRITE.substring(Byte_WRITE_index+31);\n'+
  data+' = Byte_WRITE_data.toInt();\n'+
  'delay(100);\n'+
  'Byte_WRITE = Serial2.readString();\n'+
  'delay(50);\n'+
  'Serial1.print(Byte_WRITE);\n'+
  'delay(50);\n'+
    '}\n'+
  '}';

    return code;
  };

  Blockly.Arduino.nb_onenet_read = function() {
    var obj = Blockly.Arduino.valueToCode(this, 'onenet_read_OBJ', Blockly.Arduino.ORDER_ATOMIC);
    var attr = Blockly.Arduino.valueToCode(this, 'onenet_read_ATTR', Blockly.Arduino.ORDER_ATOMIC);
    var value = Blockly.Arduino.valueToCode(this, 'onenet_read_VALUE', Blockly.Arduino.ORDER_ATOMIC);
    var code = 'if (Serial2.available()>0) {\n'+
      'String Byte_READ = Serial2.readString();\n'+
      'delay(50);\n'+
      'Serial1.print(Byte_READ);\n'+
      'delay(50);\n'+
      'int Byte_READ_index = Byte_READ.indexOf("+MIPLREAD");\n'+
      'if( Byte_READ_index != -1) {\n'+
          'String Byte_READ_NUM = Byte_READ.substring(Byte_READ_index + 12,Byte_READ_index+17);\n'+
         'Serial1.print("AT+MIPLREADRSP=0,"+Byte_READ_NUM+",'+obj+',0,'+attr+',3,\"'+value+'\",1\\r\\n");\n'+
          'Serial2.print("AT+MIPLREADRSP=0,"+Byte_READ_NUM+",'+obj+',0,'+attr+',3,\"'+value+'\",1\\r\\n");\n'+
      'delay(100);\n'+
      'Byte_READ = Serial2.readString();\n'+
      'delay(50);\n'+
      'Serial1.print(Byte_READ);\n'+
      'delay(50);\n'+
        '}\n'+
      '}';
    return code;
  };